{"uid":"ff27b554ef543648","name":"test_homepage_ui_elements","fullName":"tests.test_ui.TestUI#test_homepage_ui_elements","historyId":"27d6d51e2d30c2a42225fdddd6f22d5a","time":{"start":1725454010374,"stop":1725454011441,"duration":1067},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".inventory_item\"}\n  (Session info: chrome=128.0.6613.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7FA10B5D2+29090]\n\t(No symbol) [0x00007FF7FA07E689]\n\t(No symbol) [0x00007FF7F9F3B1CA]\n\t(No symbol) [0x00007FF7F9F8EFD7]\n\t(No symbol) [0x00007FF7F9F8F22C]\n\t(No symbol) [0x00007FF7F9FD97F7]\n\t(No symbol) [0x00007FF7F9FB672F]\n\t(No symbol) [0x00007FF7F9FD65D9]\n\t(No symbol) [0x00007FF7F9FB6493]\n\t(No symbol) [0x00007FF7F9F809B1]\n\t(No symbol) [0x00007FF7F9F81B11]\n\tGetHandleVerifier [0x00007FF7FA428C5D+3295277]\n\tGetHandleVerifier [0x00007FF7FA474843+3605523]\n\tGetHandleVerifier [0x00007FF7FA46A707+3564247]\n\tGetHandleVerifier [0x00007FF7FA1C6EB6+797318]\n\t(No symbol) [0x00007FF7FA08980F]\n\t(No symbol) [0x00007FF7FA0853F4]\n\t(No symbol) [0x00007FF7FA085580]\n\t(No symbol) [0x00007FF7FA074A1F]\n\tBaseThreadInitThunk [0x00007FFAA1D3257D+29]\n\tRtlUserThreadStart [0x00007FFAA2F8AF28+40]","statusTrace":"self = <test_ui.TestUI object at 0x000001A6510808F0>\n\n    @pytest.mark.usefixtures(\"setup\")\n    def test_homepage_ui_elements(self):\n        self.driver.get(\"https://www.saucedemo.com/\")\n    \n        # Login\n        self.driver.find_element(By.ID, \"user-name\").send_keys(\"standard_user\")\n        self.driver.find_element(By.ID, \"password\").send_keys(\"secret_sauce\", Keys.RETURN)\n    \n        # Verify successful login\n        WebDriverWait(self.driver, 10).until(\n            EC.url_contains(\"inventory.html\")\n        )\n    \n        # Wait for the product to be clickable and then click it\n        WebDriverWait(self.driver, 10).until(\n            EC.element_to_be_clickable((By.CLASS_NAME, \"inventory_item_name\"))\n        ).click()\n    \n        # Wait for the add to cart button and click it\n        WebDriverWait(self.driver, 10).until(\n            EC.element_to_be_clickable((By.ID, \"add-to-cart\"))\n        ).click()\n    \n        # Verify the product item is displayed (Assuming this is what you meant by \"search bar\")\n>       product_item = self.driver.find_element(By.CLASS_NAME, \"inventory_item\")\n\ntests\\test_ui.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A6510BC650>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF7FA074A1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAA1D3257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFAA2F8AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".inventory_item\"}\nE         (Session info: chrome=128.0.6613.114); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7FA10B5D2+29090]\nE       \t(No symbol) [0x00007FF7FA07E689]\nE       \t(No symbol) [0x00007FF7F9F3B1CA]\nE       \t(No symbol) [0x00007FF7F9F8EFD7]\nE       \t(No symbol) [0x00007FF7F9F8F22C]\nE       \t(No symbol) [0x00007FF7F9FD97F7]\nE       \t(No symbol) [0x00007FF7F9FB672F]\nE       \t(No symbol) [0x00007FF7F9FD65D9]\nE       \t(No symbol) [0x00007FF7F9FB6493]\nE       \t(No symbol) [0x00007FF7F9F809B1]\nE       \t(No symbol) [0x00007FF7F9F81B11]\nE       \tGetHandleVerifier [0x00007FF7FA428C5D+3295277]\nE       \tGetHandleVerifier [0x00007FF7FA474843+3605523]\nE       \tGetHandleVerifier [0x00007FF7FA46A707+3564247]\nE       \tGetHandleVerifier [0x00007FF7FA1C6EB6+797318]\nE       \t(No symbol) [0x00007FF7FA08980F]\nE       \t(No symbol) [0x00007FF7FA0853F4]\nE       \t(No symbol) [0x00007FF7FA085580]\nE       \t(No symbol) [0x00007FF7FA074A1F]\nE       \tBaseThreadInitThunk [0x00007FFAA1D3257D+29]\nE       \tRtlUserThreadStart [0x00007FFAA2F8AF28+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1725454008707,"stop":1725454010374,"duration":1667},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[{"name":"setup::0","time":{"start":1725454011580,"stop":1725454013894,"duration":2314},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_ui"},{"name":"subSuite","value":"TestUI"},{"name":"host","value":"MS"},{"name":"thread","value":"3728-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ui"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('setup')"]},"source":"ff27b554ef543648.json","parameterValues":[]}